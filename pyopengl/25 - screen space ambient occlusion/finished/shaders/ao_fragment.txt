#version 330 core
#extension GL_ARB_separate_shader_objects : enable

struct GeometryData {
    sampler2D position;
    sampler2D normal;
};

layout (location=0) in vec2 fragmentTexCoord;

uniform GeometryData fragmentData;
uniform vec3 kernel[64];
uniform mat4 projection;
uniform sampler2D noise;

//for tiling
const vec2 noiseScale = vec2(640.0/5.0, 480.0/5.0);

layout (location=0) out float ambientOcclusion;

void main()
{

    float occlusion = 0.0;

    vec3 pos = texture(fragmentData.position, fragmentTexCoord).xyz;
    vec3 normal = normalize(2.0 * texture(fragmentData.normal, fragmentTexCoord).xyz - vec3(1.0));
    vec3 randomVec = normalize(2.0 * texture(noise, fragmentTexCoord * noiseScale).xyz - vec3(1.0, 1.0, 0.0));

    //create a basis to transform tangent-space to view-space
    //we need T and B, can construct from gramm-schmidt process
    vec3 tangent = normalize(randomVec - normal * dot(normal, randomVec));
    vec3 bitangent = normalize(cross(normal, tangent));
    mat3 TBN = mat3(tangent, bitangent, normal);

    for (int i = 0; i < 64; i++) {

        vec3 samplePos = TBN * kernel[i];
        samplePos = pos + samplePos * 0.5;

        //in order to properly compare depth values to the depth
        // buffer, we need NDC at the sample
        vec4 offset = vec4(samplePos, 1.0);
        offset = projection * offset;
        offset.xyz /= offset.w;
        offset.xyz = offset.xyz * 0.5 + 0.5;

        float sampleDepth = texture(fragmentData.position, offset.xy).z;

        float rangeCheck = smoothstep(0.0, 1.0, 0.5 / abs(pos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + 0.025 ? 1.0 : 0.0) * rangeCheck;

    }

    ambientOcclusion = 1.0 - (occlusion / 64);
}