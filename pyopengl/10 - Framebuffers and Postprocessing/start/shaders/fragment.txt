#version 330 core

struct Material {
    sampler2D albedo;
    sampler2D ao;
    sampler2D normal;
    sampler2D specular;
};

struct Light {
    vec3 color;
    float strength;
};

in vec3 fragmentPos;
in vec2 fragmentTexCoord;
in float fragmentLightCount;
in vec3 fragmentViewPos;
in vec3 fragmentLightPos[8];

uniform Material material;
uniform Light lights[8];

layout (location=0) out vec4 color;

vec3 CalculatePointLight(int i, vec3 normal);

void main()
{

    vec3 normal = normalize(2.0 * texture(material.normal, fragmentTexCoord).rgb - vec3(1.0));
    float alpha = texture(material.albedo, fragmentTexCoord).a;
    
    //ambient
    vec3 lightLevel = 0.2 * vec3(texture(material.albedo, fragmentTexCoord)) * texture(material.ao, fragmentTexCoord).rgb;

    for (int i = 0; i < 8; i++) {
        float distance = length(fragmentLightPos[i] - fragmentPos);
        lightLevel += CalculatePointLight(i, normal) / (distance * distance);
    }

    color = vec4(lightLevel, alpha);
}

vec3 CalculatePointLight(int i, vec3 normal) {

    //directions
	vec3 lightDir = normalize(fragmentLightPos[i] - fragmentPos);
    vec3 viewDir = normalize(fragmentViewPos - fragmentPos);
    vec3 halfDir = normalize(lightDir + viewDir);

    vec3 baseTexture = vec3(texture(material.albedo, fragmentTexCoord));

    vec3 specular = vec3(texture(material.specular, fragmentTexCoord));

    float gloss = max(0.0, min(1.0, length(specular)));

    //diffuse
	vec3 result = (1 - gloss) * lights[i].color * lights[i].strength * max(0.0,dot(normal,lightDir)) * baseTexture;
	
    //specular
    result += gloss * lights[i].color * lights[i].strength * pow(max(dot(normal, halfDir), 0.0), max(32,floor(1024 * gloss))) * specular;
    
    return result;
}