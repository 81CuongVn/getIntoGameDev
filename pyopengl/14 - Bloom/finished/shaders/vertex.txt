#version 330 core

layout (location=0) in vec3 vertexPos;
layout (location=1) in vec2 vertexTexCoord;
layout (location=2) in vec3 vertexNormal;
layout (location=3) in vec3 vertexTangent;
layout (location=4) in vec3 vertexBitangent;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 viewPos;
uniform vec3 lightPos[8];

out vec3 fragmentPos;
out vec2 fragmentTexCoord;
out vec3 fragmentViewPos;
out vec3 fragmentLightPos[8];

void main()
{
    gl_Position = projection * view * model * vec4(vertexPos, 1.0);

    vec3 T = normalize(vec3(model * vec4(vertexTangent, 0)));
    vec3 B = normalize(vec3(model * vec4(vertexBitangent, 0)));
    vec3 N = normalize(vec3(model * vec4(vertexNormal, 0)));
    //TBN: tangent-space to world-space
    //TBN transpose: inverse, world-space to tangent-space
    mat3 TBN = transpose(mat3(T, B, N));
    
    fragmentPos = TBN * vec3(model * vec4(vertexPos, 1.0));
    fragmentTexCoord = vertexTexCoord;
    fragmentViewPos = TBN * viewPos;
    for (int i = 0; i < 8; i++) {
        fragmentLightPos[i] = TBN * lightPos[i];
    }
}