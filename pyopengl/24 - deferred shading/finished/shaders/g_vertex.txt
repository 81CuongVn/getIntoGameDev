#version 330 core
#extension GL_ARB_separate_shader_objects : enable

layout (location=0) in vec3 vertexPos;
layout (location=1) in vec2 vertexTexCoord;
layout (location=2) in vec3 vertexNormal;
layout (location=3) in vec3 vertexTangent;
layout (location=4) in vec3 vertexBitangent;
layout (location=5) in mat4 model;

uniform mat4 view;
uniform mat4 projection;

layout (location=0) out vec3 fragmentPos;
layout (location=1) out vec2 fragmentTexCoord;
layout (location=2) out mat3 TBN;

void main()
{
    gl_Position = projection * view * model * vec4(vertexPos, 1.0);

    vec3 T = normalize(vec3(model * vec4(vertexTangent, 0)));
    vec3 B = normalize(vec3(model * vec4(vertexBitangent, 0)));
    vec3 N = normalize(vec3(model * vec4(vertexNormal, 0)));
    // maps tangent space into world space
    TBN = mat3(T, B, N);
    
    fragmentPos = vec3(model * vec4(vertexPos, 1.0));
    fragmentTexCoord = vertexTexCoord;
}